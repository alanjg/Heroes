// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: entity.proto
#include "pch.h"
#include "entity.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace heroes {
constexpr CreateGameRequest::CreateGameRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : numplayers_(0){}
struct CreateGameRequestDefaultTypeInternal {
  constexpr CreateGameRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateGameRequestDefaultTypeInternal() {}
  union {
    CreateGameRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateGameRequestDefaultTypeInternal _CreateGameRequest_default_instance_;
constexpr CreateGameResponse::CreateGameResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(0){}
struct CreateGameResponseDefaultTypeInternal {
  constexpr CreateGameResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateGameResponseDefaultTypeInternal() {}
  union {
    CreateGameResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateGameResponseDefaultTypeInternal _CreateGameResponse_default_instance_;
constexpr JoinGameRequest::JoinGameRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , gameid_(0){}
struct JoinGameRequestDefaultTypeInternal {
  constexpr JoinGameRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~JoinGameRequestDefaultTypeInternal() {}
  union {
    JoinGameRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT JoinGameRequestDefaultTypeInternal _JoinGameRequest_default_instance_;
constexpr JoinGameResponse::JoinGameResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : playerid_(0){}
struct JoinGameResponseDefaultTypeInternal {
  constexpr JoinGameResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~JoinGameResponseDefaultTypeInternal() {}
  union {
    JoinGameResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT JoinGameResponseDefaultTypeInternal _JoinGameResponse_default_instance_;
constexpr Entity::Entity(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : controllingplayer_(0)
  , id_(0)
  , entitytype_(0)
  , positionx_(0)
  , positiony_(0)
  , positionz_(0)
  , velocityx_(0)
  , velocityy_(0)
  , velocityz_(0)
  , orientation_(0)
  , targetpointx_(0)
  , targetpointy_(0)
  , targetpointz_(0)
  , status_(0)
{}
struct EntityDefaultTypeInternal {
  constexpr EntityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EntityDefaultTypeInternal() {}
  union {
    Entity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EntityDefaultTypeInternal _Entity_default_instance_;
constexpr ClientCommand::ClientCommand(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : command_(0)

  , unitid_(0)
  , targetparameter_(0)
  , targetpointx_(0)
  , targetpointy_(0)
  , targetpointz_(0)
  , targetid_(0)
  , playerid_(0){}
struct ClientCommandDefaultTypeInternal {
  constexpr ClientCommandDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ClientCommandDefaultTypeInternal() {}
  union {
    ClientCommand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ClientCommandDefaultTypeInternal _ClientCommand_default_instance_;
constexpr ClientCommandResult::ClientCommandResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ClientCommandResultDefaultTypeInternal {
  constexpr ClientCommandResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ClientCommandResultDefaultTypeInternal() {}
  union {
    ClientCommandResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ClientCommandResultDefaultTypeInternal _ClientCommandResult_default_instance_;
constexpr UpdateStateRequest::UpdateStateRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : playerid_(0){}
struct UpdateStateRequestDefaultTypeInternal {
  constexpr UpdateStateRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdateStateRequestDefaultTypeInternal() {}
  union {
    UpdateStateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdateStateRequestDefaultTypeInternal _UpdateStateRequest_default_instance_;
constexpr ServerState::ServerState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entities_(){}
struct ServerStateDefaultTypeInternal {
  constexpr ServerStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ServerStateDefaultTypeInternal() {}
  union {
    ServerState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ServerStateDefaultTypeInternal _ServerState_default_instance_;
}  // namespace heroes
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_entity_2eproto[9];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_entity_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_entity_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_entity_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::heroes::CreateGameRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::heroes::CreateGameRequest, numplayers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::heroes::CreateGameResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::heroes::CreateGameResponse, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::heroes::JoinGameRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::heroes::JoinGameRequest, gameid_),
  PROTOBUF_FIELD_OFFSET(::heroes::JoinGameRequest, player_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::heroes::JoinGameResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::heroes::JoinGameResponse, playerid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::heroes::Entity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::heroes::Entity, controllingplayer_),
  PROTOBUF_FIELD_OFFSET(::heroes::Entity, id_),
  PROTOBUF_FIELD_OFFSET(::heroes::Entity, entitytype_),
  PROTOBUF_FIELD_OFFSET(::heroes::Entity, positionx_),
  PROTOBUF_FIELD_OFFSET(::heroes::Entity, positiony_),
  PROTOBUF_FIELD_OFFSET(::heroes::Entity, positionz_),
  PROTOBUF_FIELD_OFFSET(::heroes::Entity, velocityx_),
  PROTOBUF_FIELD_OFFSET(::heroes::Entity, velocityy_),
  PROTOBUF_FIELD_OFFSET(::heroes::Entity, velocityz_),
  PROTOBUF_FIELD_OFFSET(::heroes::Entity, orientation_),
  PROTOBUF_FIELD_OFFSET(::heroes::Entity, targetpointx_),
  PROTOBUF_FIELD_OFFSET(::heroes::Entity, targetpointy_),
  PROTOBUF_FIELD_OFFSET(::heroes::Entity, targetpointz_),
  PROTOBUF_FIELD_OFFSET(::heroes::Entity, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::heroes::ClientCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::heroes::ClientCommand, command_),
  PROTOBUF_FIELD_OFFSET(::heroes::ClientCommand, unitid_),
  PROTOBUF_FIELD_OFFSET(::heroes::ClientCommand, targetparameter_),
  PROTOBUF_FIELD_OFFSET(::heroes::ClientCommand, targetpointx_),
  PROTOBUF_FIELD_OFFSET(::heroes::ClientCommand, targetpointy_),
  PROTOBUF_FIELD_OFFSET(::heroes::ClientCommand, targetpointz_),
  PROTOBUF_FIELD_OFFSET(::heroes::ClientCommand, targetid_),
  PROTOBUF_FIELD_OFFSET(::heroes::ClientCommand, playerid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::heroes::ClientCommandResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::heroes::UpdateStateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::heroes::UpdateStateRequest, playerid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::heroes::ServerState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::heroes::ServerState, entities_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::heroes::CreateGameRequest)},
  { 6, -1, sizeof(::heroes::CreateGameResponse)},
  { 12, -1, sizeof(::heroes::JoinGameRequest)},
  { 19, -1, sizeof(::heroes::JoinGameResponse)},
  { 25, -1, sizeof(::heroes::Entity)},
  { 44, -1, sizeof(::heroes::ClientCommand)},
  { 57, -1, sizeof(::heroes::ClientCommandResult)},
  { 62, -1, sizeof(::heroes::UpdateStateRequest)},
  { 68, -1, sizeof(::heroes::ServerState)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::heroes::_CreateGameRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::heroes::_CreateGameResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::heroes::_JoinGameRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::heroes::_JoinGameResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::heroes::_Entity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::heroes::_ClientCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::heroes::_ClientCommandResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::heroes::_UpdateStateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::heroes::_ServerState_default_instance_),
};

const char descriptor_table_protodef_entity_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014entity.proto\022\006heroes\"\'\n\021CreateGameRequ"
  "est\022\022\n\nnumPlayers\030\001 \001(\005\" \n\022CreateGameRes"
  "ponse\022\n\n\002id\030\001 \001(\005\"1\n\017JoinGameRequest\022\016\n\006"
  "gameId\030\001 \001(\005\022\016\n\006player\030\002 \001(\t\"$\n\020JoinGame"
  "Response\022\020\n\010playerId\030\001 \001(\005\"\222\003\n\006Entity\022\031\n"
  "\021controllingPlayer\030\001 \001(\005\022\n\n\002id\030\002 \001(\005\022\022\n\n"
  "entityType\030\003 \001(\005\022\021\n\tpositionX\030\004 \001(\002\022\021\n\tp"
  "ositionY\030\005 \001(\002\022\021\n\tpositionZ\030\006 \001(\002\022\021\n\tvel"
  "ocityX\030\007 \001(\002\022\021\n\tvelocityY\030\010 \001(\002\022\021\n\tveloc"
  "ityZ\030\t \001(\002\022\023\n\013orientation\030\n \001(\002\022\024\n\014targe"
  "tPointX\030\013 \001(\002\022\024\n\014targetPointY\030\014 \001(\002\022\024\n\014t"
  "argetPointZ\030\r \001(\002\022%\n\006status\030\016 \001(\0162\025.hero"
  "es.Entity.Status\"]\n\006Status\022\010\n\004IDLE\020\000\022\n\n\006"
  "MOVING\020\001\022\r\n\tATTACKING\020\002\022\014\n\010ATTACKED\020\003\022\013\n"
  "\007SPECIAL\020\004\022\t\n\005DYING\020\005\022\010\n\004DEAD\020\006\"\313\002\n\rClie"
  "ntCommand\022.\n\007command\030\001 \001(\0162\035.heroes.Clie"
  "ntCommand.Command\022\016\n\006unitId\030\002 \001(\005\022\027\n\017tar"
  "getParameter\030\003 \001(\005\022\024\n\014targetPointX\030\004 \001(\002"
  "\022\024\n\014targetPointY\030\005 \001(\002\022\024\n\014targetPointZ\030\006"
  " \001(\002\022\020\n\010targetId\030\007 \001(\005\022\020\n\010playerId\030\010 \001(\005"
  "\"{\n\007Command\022\010\n\004NONE\020\000\022\021\n\rMOVE_TO_POINT\020\001"
  "\022\017\n\013FOLLOW_UNIT\020\002\022\017\n\013ATTACK_UNIT\020\003\022\020\n\014AT"
  "TACK_POINT\020\004\022\010\n\004STOP\020\005\022\010\n\004HOLD\020\006\022\013\n\007SPEC"
  "IAL\020\007\"\025\n\023ClientCommandResult\"&\n\022UpdateSt"
  "ateRequest\022\020\n\010playerId\030\001 \001(\005\"/\n\013ServerSt"
  "ate\022 \n\010entities\030\001 \003(\0132\016.heroes.Entity2\250\002"
  "\n\014HeroesServer\022L\n\024ProcessClientCommand\022\025"
  ".heroes.ClientCommand\032\033.heroes.ClientCom"
  "mandResult\"\000\022B\n\013UpdateState\022\032.heroes.Upd"
  "ateStateRequest\032\023.heroes.ServerState\"\0000\001"
  "\022E\n\nCreateGame\022\031.heroes.CreateGameReques"
  "t\032\032.heroes.CreateGameResponse\"\000\022\?\n\010JoinG"
  "ame\022\027.heroes.JoinGameRequest\032\030.heroes.Jo"
  "inGameResponse\"\000b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_entity_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_entity_2eproto = {
  false, false, 1344, descriptor_table_protodef_entity_2eproto, "entity.proto", 
  &descriptor_table_entity_2eproto_once, nullptr, 0, 9,
  schemas, file_default_instances, TableStruct_entity_2eproto::offsets,
  file_level_metadata_entity_2eproto, file_level_enum_descriptors_entity_2eproto, file_level_service_descriptors_entity_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_entity_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_entity_2eproto);
  return descriptor_table_entity_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_entity_2eproto(&descriptor_table_entity_2eproto);
namespace heroes {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Entity_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_entity_2eproto);
  return file_level_enum_descriptors_entity_2eproto[0];
}
bool Entity_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Entity_Status Entity::IDLE;
constexpr Entity_Status Entity::MOVING;
constexpr Entity_Status Entity::ATTACKING;
constexpr Entity_Status Entity::ATTACKED;
constexpr Entity_Status Entity::SPECIAL;
constexpr Entity_Status Entity::DYING;
constexpr Entity_Status Entity::DEAD;
constexpr Entity_Status Entity::Status_MIN;
constexpr Entity_Status Entity::Status_MAX;
constexpr int Entity::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientCommand_Command_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_entity_2eproto);
  return file_level_enum_descriptors_entity_2eproto[1];
}
bool ClientCommand_Command_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ClientCommand_Command ClientCommand::NONE;
constexpr ClientCommand_Command ClientCommand::MOVE_TO_POINT;
constexpr ClientCommand_Command ClientCommand::FOLLOW_UNIT;
constexpr ClientCommand_Command ClientCommand::ATTACK_UNIT;
constexpr ClientCommand_Command ClientCommand::ATTACK_POINT;
constexpr ClientCommand_Command ClientCommand::STOP;
constexpr ClientCommand_Command ClientCommand::HOLD;
constexpr ClientCommand_Command ClientCommand::SPECIAL;
constexpr ClientCommand_Command ClientCommand::Command_MIN;
constexpr ClientCommand_Command ClientCommand::Command_MAX;
constexpr int ClientCommand::Command_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class CreateGameRequest::_Internal {
 public:
};

CreateGameRequest::CreateGameRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:heroes.CreateGameRequest)
}
CreateGameRequest::CreateGameRequest(const CreateGameRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  numplayers_ = from.numplayers_;
  // @@protoc_insertion_point(copy_constructor:heroes.CreateGameRequest)
}

void CreateGameRequest::SharedCtor() {
numplayers_ = 0;
}

CreateGameRequest::~CreateGameRequest() {
  // @@protoc_insertion_point(destructor:heroes.CreateGameRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateGameRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CreateGameRequest::ArenaDtor(void* object) {
  CreateGameRequest* _this = reinterpret_cast< CreateGameRequest* >(object);
  (void)_this;
}
void CreateGameRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateGameRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateGameRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:heroes.CreateGameRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  numplayers_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateGameRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 numPlayers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          numplayers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateGameRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:heroes.CreateGameRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 numPlayers = 1;
  if (this->numplayers() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_numplayers(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:heroes.CreateGameRequest)
  return target;
}

size_t CreateGameRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:heroes.CreateGameRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 numPlayers = 1;
  if (this->numplayers() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_numplayers());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateGameRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:heroes.CreateGameRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateGameRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateGameRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:heroes.CreateGameRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:heroes.CreateGameRequest)
    MergeFrom(*source);
  }
}

void CreateGameRequest::MergeFrom(const CreateGameRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:heroes.CreateGameRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.numplayers() != 0) {
    _internal_set_numplayers(from._internal_numplayers());
  }
}

void CreateGameRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:heroes.CreateGameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateGameRequest::CopyFrom(const CreateGameRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:heroes.CreateGameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateGameRequest::IsInitialized() const {
  return true;
}

void CreateGameRequest::InternalSwap(CreateGameRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(numplayers_, other->numplayers_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateGameRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CreateGameResponse::_Internal {
 public:
};

CreateGameResponse::CreateGameResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:heroes.CreateGameResponse)
}
CreateGameResponse::CreateGameResponse(const CreateGameResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:heroes.CreateGameResponse)
}

void CreateGameResponse::SharedCtor() {
id_ = 0;
}

CreateGameResponse::~CreateGameResponse() {
  // @@protoc_insertion_point(destructor:heroes.CreateGameResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateGameResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CreateGameResponse::ArenaDtor(void* object) {
  CreateGameResponse* _this = reinterpret_cast< CreateGameResponse* >(object);
  (void)_this;
}
void CreateGameResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateGameResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateGameResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:heroes.CreateGameResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateGameResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateGameResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:heroes.CreateGameResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:heroes.CreateGameResponse)
  return target;
}

size_t CreateGameResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:heroes.CreateGameResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateGameResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:heroes.CreateGameResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateGameResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateGameResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:heroes.CreateGameResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:heroes.CreateGameResponse)
    MergeFrom(*source);
  }
}

void CreateGameResponse::MergeFrom(const CreateGameResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:heroes.CreateGameResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void CreateGameResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:heroes.CreateGameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateGameResponse::CopyFrom(const CreateGameResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:heroes.CreateGameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateGameResponse::IsInitialized() const {
  return true;
}

void CreateGameResponse::InternalSwap(CreateGameResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateGameResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class JoinGameRequest::_Internal {
 public:
};

JoinGameRequest::JoinGameRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:heroes.JoinGameRequest)
}
JoinGameRequest::JoinGameRequest(const JoinGameRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  player_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_player().empty()) {
    player_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_player(), 
      GetArena());
  }
  gameid_ = from.gameid_;
  // @@protoc_insertion_point(copy_constructor:heroes.JoinGameRequest)
}

void JoinGameRequest::SharedCtor() {
player_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
gameid_ = 0;
}

JoinGameRequest::~JoinGameRequest() {
  // @@protoc_insertion_point(destructor:heroes.JoinGameRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void JoinGameRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  player_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void JoinGameRequest::ArenaDtor(void* object) {
  JoinGameRequest* _this = reinterpret_cast< JoinGameRequest* >(object);
  (void)_this;
}
void JoinGameRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JoinGameRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void JoinGameRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:heroes.JoinGameRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_.ClearToEmpty();
  gameid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JoinGameRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 gameId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          gameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string player = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_player();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "heroes.JoinGameRequest.player"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JoinGameRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:heroes.JoinGameRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 gameId = 1;
  if (this->gameid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_gameid(), target);
  }

  // string player = 2;
  if (this->player().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_player().data(), static_cast<int>(this->_internal_player().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "heroes.JoinGameRequest.player");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_player(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:heroes.JoinGameRequest)
  return target;
}

size_t JoinGameRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:heroes.JoinGameRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string player = 2;
  if (this->player().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_player());
  }

  // int32 gameId = 1;
  if (this->gameid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gameid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JoinGameRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:heroes.JoinGameRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const JoinGameRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JoinGameRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:heroes.JoinGameRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:heroes.JoinGameRequest)
    MergeFrom(*source);
  }
}

void JoinGameRequest::MergeFrom(const JoinGameRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:heroes.JoinGameRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.player().size() > 0) {
    _internal_set_player(from._internal_player());
  }
  if (from.gameid() != 0) {
    _internal_set_gameid(from._internal_gameid());
  }
}

void JoinGameRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:heroes.JoinGameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinGameRequest::CopyFrom(const JoinGameRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:heroes.JoinGameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinGameRequest::IsInitialized() const {
  return true;
}

void JoinGameRequest::InternalSwap(JoinGameRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  player_.Swap(&other->player_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(gameid_, other->gameid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JoinGameRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class JoinGameResponse::_Internal {
 public:
};

JoinGameResponse::JoinGameResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:heroes.JoinGameResponse)
}
JoinGameResponse::JoinGameResponse(const JoinGameResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  playerid_ = from.playerid_;
  // @@protoc_insertion_point(copy_constructor:heroes.JoinGameResponse)
}

void JoinGameResponse::SharedCtor() {
playerid_ = 0;
}

JoinGameResponse::~JoinGameResponse() {
  // @@protoc_insertion_point(destructor:heroes.JoinGameResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void JoinGameResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void JoinGameResponse::ArenaDtor(void* object) {
  JoinGameResponse* _this = reinterpret_cast< JoinGameResponse* >(object);
  (void)_this;
}
void JoinGameResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JoinGameResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void JoinGameResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:heroes.JoinGameResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  playerid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JoinGameResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JoinGameResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:heroes.JoinGameResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 playerId = 1;
  if (this->playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_playerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:heroes.JoinGameResponse)
  return target;
}

size_t JoinGameResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:heroes.JoinGameResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 playerId = 1;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_playerid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JoinGameResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:heroes.JoinGameResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const JoinGameResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JoinGameResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:heroes.JoinGameResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:heroes.JoinGameResponse)
    MergeFrom(*source);
  }
}

void JoinGameResponse::MergeFrom(const JoinGameResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:heroes.JoinGameResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.playerid() != 0) {
    _internal_set_playerid(from._internal_playerid());
  }
}

void JoinGameResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:heroes.JoinGameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinGameResponse::CopyFrom(const JoinGameResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:heroes.JoinGameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinGameResponse::IsInitialized() const {
  return true;
}

void JoinGameResponse::InternalSwap(JoinGameResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(playerid_, other->playerid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JoinGameResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Entity::_Internal {
 public:
};

Entity::Entity(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:heroes.Entity)
}
Entity::Entity(const Entity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&controllingplayer_, &from.controllingplayer_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&controllingplayer_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:heroes.Entity)
}

void Entity::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&controllingplayer_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&controllingplayer_)) + sizeof(status_));
}

Entity::~Entity() {
  // @@protoc_insertion_point(destructor:heroes.Entity)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Entity::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Entity::ArenaDtor(void* object) {
  Entity* _this = reinterpret_cast< Entity* >(object);
  (void)_this;
}
void Entity::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Entity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Entity::Clear() {
// @@protoc_insertion_point(message_clear_start:heroes.Entity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&controllingplayer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&controllingplayer_)) + sizeof(status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Entity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 controllingPlayer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          controllingplayer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 entityType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          entitytype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float positionX = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          positionx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float positionY = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          positiony_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float positionZ = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          positionz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float velocityX = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          velocityx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float velocityY = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          velocityy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float velocityZ = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          velocityz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float orientation = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          orientation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float targetPointX = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          targetpointx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float targetPointY = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          targetpointy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float targetPointZ = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          targetpointz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .heroes.Entity.Status status = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::heroes::Entity_Status>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Entity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:heroes.Entity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 controllingPlayer = 1;
  if (this->controllingplayer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_controllingplayer(), target);
  }

  // int32 id = 2;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_id(), target);
  }

  // int32 entityType = 3;
  if (this->entitytype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_entitytype(), target);
  }

  // float positionX = 4;
  if (!(this->positionx() <= 0 && this->positionx() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_positionx(), target);
  }

  // float positionY = 5;
  if (!(this->positiony() <= 0 && this->positiony() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_positiony(), target);
  }

  // float positionZ = 6;
  if (!(this->positionz() <= 0 && this->positionz() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_positionz(), target);
  }

  // float velocityX = 7;
  if (!(this->velocityx() <= 0 && this->velocityx() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_velocityx(), target);
  }

  // float velocityY = 8;
  if (!(this->velocityy() <= 0 && this->velocityy() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_velocityy(), target);
  }

  // float velocityZ = 9;
  if (!(this->velocityz() <= 0 && this->velocityz() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_velocityz(), target);
  }

  // float orientation = 10;
  if (!(this->orientation() <= 0 && this->orientation() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_orientation(), target);
  }

  // float targetPointX = 11;
  if (!(this->targetpointx() <= 0 && this->targetpointx() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_targetpointx(), target);
  }

  // float targetPointY = 12;
  if (!(this->targetpointy() <= 0 && this->targetpointy() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_targetpointy(), target);
  }

  // float targetPointZ = 13;
  if (!(this->targetpointz() <= 0 && this->targetpointz() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_targetpointz(), target);
  }

  // .heroes.Entity.Status status = 14;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      14, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:heroes.Entity)
  return target;
}

size_t Entity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:heroes.Entity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 controllingPlayer = 1;
  if (this->controllingplayer() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_controllingplayer());
  }

  // int32 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 entityType = 3;
  if (this->entitytype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_entitytype());
  }

  // float positionX = 4;
  if (!(this->positionx() <= 0 && this->positionx() >= 0)) {
    total_size += 1 + 4;
  }

  // float positionY = 5;
  if (!(this->positiony() <= 0 && this->positiony() >= 0)) {
    total_size += 1 + 4;
  }

  // float positionZ = 6;
  if (!(this->positionz() <= 0 && this->positionz() >= 0)) {
    total_size += 1 + 4;
  }

  // float velocityX = 7;
  if (!(this->velocityx() <= 0 && this->velocityx() >= 0)) {
    total_size += 1 + 4;
  }

  // float velocityY = 8;
  if (!(this->velocityy() <= 0 && this->velocityy() >= 0)) {
    total_size += 1 + 4;
  }

  // float velocityZ = 9;
  if (!(this->velocityz() <= 0 && this->velocityz() >= 0)) {
    total_size += 1 + 4;
  }

  // float orientation = 10;
  if (!(this->orientation() <= 0 && this->orientation() >= 0)) {
    total_size += 1 + 4;
  }

  // float targetPointX = 11;
  if (!(this->targetpointx() <= 0 && this->targetpointx() >= 0)) {
    total_size += 1 + 4;
  }

  // float targetPointY = 12;
  if (!(this->targetpointy() <= 0 && this->targetpointy() >= 0)) {
    total_size += 1 + 4;
  }

  // float targetPointZ = 13;
  if (!(this->targetpointz() <= 0 && this->targetpointz() >= 0)) {
    total_size += 1 + 4;
  }

  // .heroes.Entity.Status status = 14;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Entity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:heroes.Entity)
  GOOGLE_DCHECK_NE(&from, this);
  const Entity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Entity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:heroes.Entity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:heroes.Entity)
    MergeFrom(*source);
  }
}

void Entity::MergeFrom(const Entity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:heroes.Entity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.controllingplayer() != 0) {
    _internal_set_controllingplayer(from._internal_controllingplayer());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.entitytype() != 0) {
    _internal_set_entitytype(from._internal_entitytype());
  }
  if (!(from.positionx() <= 0 && from.positionx() >= 0)) {
    _internal_set_positionx(from._internal_positionx());
  }
  if (!(from.positiony() <= 0 && from.positiony() >= 0)) {
    _internal_set_positiony(from._internal_positiony());
  }
  if (!(from.positionz() <= 0 && from.positionz() >= 0)) {
    _internal_set_positionz(from._internal_positionz());
  }
  if (!(from.velocityx() <= 0 && from.velocityx() >= 0)) {
    _internal_set_velocityx(from._internal_velocityx());
  }
  if (!(from.velocityy() <= 0 && from.velocityy() >= 0)) {
    _internal_set_velocityy(from._internal_velocityy());
  }
  if (!(from.velocityz() <= 0 && from.velocityz() >= 0)) {
    _internal_set_velocityz(from._internal_velocityz());
  }
  if (!(from.orientation() <= 0 && from.orientation() >= 0)) {
    _internal_set_orientation(from._internal_orientation());
  }
  if (!(from.targetpointx() <= 0 && from.targetpointx() >= 0)) {
    _internal_set_targetpointx(from._internal_targetpointx());
  }
  if (!(from.targetpointy() <= 0 && from.targetpointy() >= 0)) {
    _internal_set_targetpointy(from._internal_targetpointy());
  }
  if (!(from.targetpointz() <= 0 && from.targetpointz() >= 0)) {
    _internal_set_targetpointz(from._internal_targetpointz());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void Entity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:heroes.Entity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Entity::CopyFrom(const Entity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:heroes.Entity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Entity::IsInitialized() const {
  return true;
}

void Entity::InternalSwap(Entity* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Entity, status_)
      + sizeof(Entity::status_)
      - PROTOBUF_FIELD_OFFSET(Entity, controllingplayer_)>(
          reinterpret_cast<char*>(&controllingplayer_),
          reinterpret_cast<char*>(&other->controllingplayer_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Entity::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ClientCommand::_Internal {
 public:
};

ClientCommand::ClientCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:heroes.ClientCommand)
}
ClientCommand::ClientCommand(const ClientCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&command_, &from.command_,
    static_cast<size_t>(reinterpret_cast<char*>(&playerid_) -
    reinterpret_cast<char*>(&command_)) + sizeof(playerid_));
  // @@protoc_insertion_point(copy_constructor:heroes.ClientCommand)
}

void ClientCommand::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&command_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&playerid_) -
    reinterpret_cast<char*>(&command_)) + sizeof(playerid_));
}

ClientCommand::~ClientCommand() {
  // @@protoc_insertion_point(destructor:heroes.ClientCommand)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ClientCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ClientCommand::ArenaDtor(void* object) {
  ClientCommand* _this = reinterpret_cast< ClientCommand* >(object);
  (void)_this;
}
void ClientCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClientCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:heroes.ClientCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&command_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&playerid_) -
      reinterpret_cast<char*>(&command_)) + sizeof(playerid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .heroes.ClientCommand.Command command = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_command(static_cast<::heroes::ClientCommand_Command>(val));
        } else goto handle_unusual;
        continue;
      // int32 unitId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          unitid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 targetParameter = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          targetparameter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float targetPointX = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          targetpointx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float targetPointY = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          targetpointy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float targetPointZ = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          targetpointz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 targetId = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          targetid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 playerId = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:heroes.ClientCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .heroes.ClientCommand.Command command = 1;
  if (this->command() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_command(), target);
  }

  // int32 unitId = 2;
  if (this->unitid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_unitid(), target);
  }

  // int32 targetParameter = 3;
  if (this->targetparameter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_targetparameter(), target);
  }

  // float targetPointX = 4;
  if (!(this->targetpointx() <= 0 && this->targetpointx() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_targetpointx(), target);
  }

  // float targetPointY = 5;
  if (!(this->targetpointy() <= 0 && this->targetpointy() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_targetpointy(), target);
  }

  // float targetPointZ = 6;
  if (!(this->targetpointz() <= 0 && this->targetpointz() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_targetpointz(), target);
  }

  // int32 targetId = 7;
  if (this->targetid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_targetid(), target);
  }

  // int32 playerId = 8;
  if (this->playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_playerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:heroes.ClientCommand)
  return target;
}

size_t ClientCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:heroes.ClientCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .heroes.ClientCommand.Command command = 1;
  if (this->command() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_command());
  }

  // int32 unitId = 2;
  if (this->unitid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_unitid());
  }

  // int32 targetParameter = 3;
  if (this->targetparameter() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_targetparameter());
  }

  // float targetPointX = 4;
  if (!(this->targetpointx() <= 0 && this->targetpointx() >= 0)) {
    total_size += 1 + 4;
  }

  // float targetPointY = 5;
  if (!(this->targetpointy() <= 0 && this->targetpointy() >= 0)) {
    total_size += 1 + 4;
  }

  // float targetPointZ = 6;
  if (!(this->targetpointz() <= 0 && this->targetpointz() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 targetId = 7;
  if (this->targetid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_targetid());
  }

  // int32 playerId = 8;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_playerid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:heroes.ClientCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:heroes.ClientCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:heroes.ClientCommand)
    MergeFrom(*source);
  }
}

void ClientCommand::MergeFrom(const ClientCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:heroes.ClientCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.command() != 0) {
    _internal_set_command(from._internal_command());
  }
  if (from.unitid() != 0) {
    _internal_set_unitid(from._internal_unitid());
  }
  if (from.targetparameter() != 0) {
    _internal_set_targetparameter(from._internal_targetparameter());
  }
  if (!(from.targetpointx() <= 0 && from.targetpointx() >= 0)) {
    _internal_set_targetpointx(from._internal_targetpointx());
  }
  if (!(from.targetpointy() <= 0 && from.targetpointy() >= 0)) {
    _internal_set_targetpointy(from._internal_targetpointy());
  }
  if (!(from.targetpointz() <= 0 && from.targetpointz() >= 0)) {
    _internal_set_targetpointz(from._internal_targetpointz());
  }
  if (from.targetid() != 0) {
    _internal_set_targetid(from._internal_targetid());
  }
  if (from.playerid() != 0) {
    _internal_set_playerid(from._internal_playerid());
  }
}

void ClientCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:heroes.ClientCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientCommand::CopyFrom(const ClientCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:heroes.ClientCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientCommand::IsInitialized() const {
  return true;
}

void ClientCommand::InternalSwap(ClientCommand* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientCommand, playerid_)
      + sizeof(ClientCommand::playerid_)
      - PROTOBUF_FIELD_OFFSET(ClientCommand, command_)>(
          reinterpret_cast<char*>(&command_),
          reinterpret_cast<char*>(&other->command_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ClientCommandResult::_Internal {
 public:
};

ClientCommandResult::ClientCommandResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:heroes.ClientCommandResult)
}
ClientCommandResult::ClientCommandResult(const ClientCommandResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:heroes.ClientCommandResult)
}

void ClientCommandResult::SharedCtor() {
}

ClientCommandResult::~ClientCommandResult() {
  // @@protoc_insertion_point(destructor:heroes.ClientCommandResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ClientCommandResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ClientCommandResult::ArenaDtor(void* object) {
  ClientCommandResult* _this = reinterpret_cast< ClientCommandResult* >(object);
  (void)_this;
}
void ClientCommandResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClientCommandResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientCommandResult::Clear() {
// @@protoc_insertion_point(message_clear_start:heroes.ClientCommandResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientCommandResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientCommandResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:heroes.ClientCommandResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:heroes.ClientCommandResult)
  return target;
}

size_t ClientCommandResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:heroes.ClientCommandResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientCommandResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:heroes.ClientCommandResult)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientCommandResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientCommandResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:heroes.ClientCommandResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:heroes.ClientCommandResult)
    MergeFrom(*source);
  }
}

void ClientCommandResult::MergeFrom(const ClientCommandResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:heroes.ClientCommandResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ClientCommandResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:heroes.ClientCommandResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientCommandResult::CopyFrom(const ClientCommandResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:heroes.ClientCommandResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientCommandResult::IsInitialized() const {
  return true;
}

void ClientCommandResult::InternalSwap(ClientCommandResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientCommandResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UpdateStateRequest::_Internal {
 public:
};

UpdateStateRequest::UpdateStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:heroes.UpdateStateRequest)
}
UpdateStateRequest::UpdateStateRequest(const UpdateStateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  playerid_ = from.playerid_;
  // @@protoc_insertion_point(copy_constructor:heroes.UpdateStateRequest)
}

void UpdateStateRequest::SharedCtor() {
playerid_ = 0;
}

UpdateStateRequest::~UpdateStateRequest() {
  // @@protoc_insertion_point(destructor:heroes.UpdateStateRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateStateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UpdateStateRequest::ArenaDtor(void* object) {
  UpdateStateRequest* _this = reinterpret_cast< UpdateStateRequest* >(object);
  (void)_this;
}
void UpdateStateRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateStateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateStateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:heroes.UpdateStateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  playerid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateStateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateStateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:heroes.UpdateStateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 playerId = 1;
  if (this->playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_playerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:heroes.UpdateStateRequest)
  return target;
}

size_t UpdateStateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:heroes.UpdateStateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 playerId = 1;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_playerid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateStateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:heroes.UpdateStateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateStateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateStateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:heroes.UpdateStateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:heroes.UpdateStateRequest)
    MergeFrom(*source);
  }
}

void UpdateStateRequest::MergeFrom(const UpdateStateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:heroes.UpdateStateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.playerid() != 0) {
    _internal_set_playerid(from._internal_playerid());
  }
}

void UpdateStateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:heroes.UpdateStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateStateRequest::CopyFrom(const UpdateStateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:heroes.UpdateStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateStateRequest::IsInitialized() const {
  return true;
}

void UpdateStateRequest::InternalSwap(UpdateStateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(playerid_, other->playerid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateStateRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ServerState::_Internal {
 public:
};

ServerState::ServerState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  entities_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:heroes.ServerState)
}
ServerState::ServerState(const ServerState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      entities_(from.entities_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:heroes.ServerState)
}

void ServerState::SharedCtor() {
}

ServerState::~ServerState() {
  // @@protoc_insertion_point(destructor:heroes.ServerState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ServerState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ServerState::ArenaDtor(void* object) {
  ServerState* _this = reinterpret_cast< ServerState* >(object);
  (void)_this;
}
void ServerState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ServerState::Clear() {
// @@protoc_insertion_point(message_clear_start:heroes.ServerState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entities_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .heroes.Entity entities = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:heroes.ServerState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .heroes.Entity entities = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entities_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_entities(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:heroes.ServerState)
  return target;
}

size_t ServerState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:heroes.ServerState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .heroes.Entity entities = 1;
  total_size += 1UL * this->_internal_entities_size();
  for (const auto& msg : this->entities_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:heroes.ServerState)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:heroes.ServerState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:heroes.ServerState)
    MergeFrom(*source);
  }
}

void ServerState::MergeFrom(const ServerState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:heroes.ServerState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entities_.MergeFrom(from.entities_);
}

void ServerState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:heroes.ServerState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerState::CopyFrom(const ServerState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:heroes.ServerState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerState::IsInitialized() const {
  return true;
}

void ServerState::InternalSwap(ServerState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  entities_.InternalSwap(&other->entities_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerState::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace heroes
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::heroes::CreateGameRequest* Arena::CreateMaybeMessage< ::heroes::CreateGameRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::heroes::CreateGameRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::heroes::CreateGameResponse* Arena::CreateMaybeMessage< ::heroes::CreateGameResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::heroes::CreateGameResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::heroes::JoinGameRequest* Arena::CreateMaybeMessage< ::heroes::JoinGameRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::heroes::JoinGameRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::heroes::JoinGameResponse* Arena::CreateMaybeMessage< ::heroes::JoinGameResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::heroes::JoinGameResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::heroes::Entity* Arena::CreateMaybeMessage< ::heroes::Entity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::heroes::Entity >(arena);
}
template<> PROTOBUF_NOINLINE ::heroes::ClientCommand* Arena::CreateMaybeMessage< ::heroes::ClientCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::heroes::ClientCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::heroes::ClientCommandResult* Arena::CreateMaybeMessage< ::heroes::ClientCommandResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::heroes::ClientCommandResult >(arena);
}
template<> PROTOBUF_NOINLINE ::heroes::UpdateStateRequest* Arena::CreateMaybeMessage< ::heroes::UpdateStateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::heroes::UpdateStateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::heroes::ServerState* Arena::CreateMaybeMessage< ::heroes::ServerState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::heroes::ServerState >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
