// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: entity.proto
#ifndef GRPC_entity_2eproto__INCLUDED
#define GRPC_entity_2eproto__INCLUDED

#include "entity.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace heroes {

class HeroesServer final {
 public:
  static constexpr char const* service_full_name() {
    return "heroes.HeroesServer";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status ProcessClientCommand(::grpc::ClientContext* context, const ::heroes::ClientCommand& request, ::heroes::ClientCommandResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::heroes::ClientCommandResult>> AsyncProcessClientCommand(::grpc::ClientContext* context, const ::heroes::ClientCommand& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::heroes::ClientCommandResult>>(AsyncProcessClientCommandRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::heroes::ClientCommandResult>> PrepareAsyncProcessClientCommand(::grpc::ClientContext* context, const ::heroes::ClientCommand& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::heroes::ClientCommandResult>>(PrepareAsyncProcessClientCommandRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::heroes::ServerState>> UpdateState(::grpc::ClientContext* context, const ::heroes::UpdateStateRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::heroes::ServerState>>(UpdateStateRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::heroes::ServerState>> AsyncUpdateState(::grpc::ClientContext* context, const ::heroes::UpdateStateRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::heroes::ServerState>>(AsyncUpdateStateRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::heroes::ServerState>> PrepareAsyncUpdateState(::grpc::ClientContext* context, const ::heroes::UpdateStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::heroes::ServerState>>(PrepareAsyncUpdateStateRaw(context, request, cq));
    }
    virtual ::grpc::Status CreateGame(::grpc::ClientContext* context, const ::heroes::CreateGameRequest& request, ::heroes::CreateGameResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::heroes::CreateGameResponse>> AsyncCreateGame(::grpc::ClientContext* context, const ::heroes::CreateGameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::heroes::CreateGameResponse>>(AsyncCreateGameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::heroes::CreateGameResponse>> PrepareAsyncCreateGame(::grpc::ClientContext* context, const ::heroes::CreateGameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::heroes::CreateGameResponse>>(PrepareAsyncCreateGameRaw(context, request, cq));
    }
    virtual ::grpc::Status JoinGame(::grpc::ClientContext* context, const ::heroes::JoinGameRequest& request, ::heroes::JoinGameResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::heroes::JoinGameResponse>> AsyncJoinGame(::grpc::ClientContext* context, const ::heroes::JoinGameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::heroes::JoinGameResponse>>(AsyncJoinGameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::heroes::JoinGameResponse>> PrepareAsyncJoinGame(::grpc::ClientContext* context, const ::heroes::JoinGameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::heroes::JoinGameResponse>>(PrepareAsyncJoinGameRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void ProcessClientCommand(::grpc::ClientContext* context, const ::heroes::ClientCommand* request, ::heroes::ClientCommandResult* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ProcessClientCommand(::grpc::ClientContext* context, const ::heroes::ClientCommand* request, ::heroes::ClientCommandResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ProcessClientCommand(::grpc::ClientContext* context, const ::heroes::ClientCommand* request, ::heroes::ClientCommandResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdateState(::grpc::ClientContext* context, ::heroes::UpdateStateRequest* request, ::grpc::ClientReadReactor< ::heroes::ServerState>* reactor) = 0;
      #else
      virtual void UpdateState(::grpc::ClientContext* context, ::heroes::UpdateStateRequest* request, ::grpc::experimental::ClientReadReactor< ::heroes::ServerState>* reactor) = 0;
      #endif
      virtual void CreateGame(::grpc::ClientContext* context, const ::heroes::CreateGameRequest* request, ::heroes::CreateGameResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateGame(::grpc::ClientContext* context, const ::heroes::CreateGameRequest* request, ::heroes::CreateGameResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateGame(::grpc::ClientContext* context, const ::heroes::CreateGameRequest* request, ::heroes::CreateGameResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void JoinGame(::grpc::ClientContext* context, const ::heroes::JoinGameRequest* request, ::heroes::JoinGameResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void JoinGame(::grpc::ClientContext* context, const ::heroes::JoinGameRequest* request, ::heroes::JoinGameResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void JoinGame(::grpc::ClientContext* context, const ::heroes::JoinGameRequest* request, ::heroes::JoinGameResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::heroes::ClientCommandResult>* AsyncProcessClientCommandRaw(::grpc::ClientContext* context, const ::heroes::ClientCommand& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::heroes::ClientCommandResult>* PrepareAsyncProcessClientCommandRaw(::grpc::ClientContext* context, const ::heroes::ClientCommand& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::heroes::ServerState>* UpdateStateRaw(::grpc::ClientContext* context, const ::heroes::UpdateStateRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::heroes::ServerState>* AsyncUpdateStateRaw(::grpc::ClientContext* context, const ::heroes::UpdateStateRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::heroes::ServerState>* PrepareAsyncUpdateStateRaw(::grpc::ClientContext* context, const ::heroes::UpdateStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::heroes::CreateGameResponse>* AsyncCreateGameRaw(::grpc::ClientContext* context, const ::heroes::CreateGameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::heroes::CreateGameResponse>* PrepareAsyncCreateGameRaw(::grpc::ClientContext* context, const ::heroes::CreateGameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::heroes::JoinGameResponse>* AsyncJoinGameRaw(::grpc::ClientContext* context, const ::heroes::JoinGameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::heroes::JoinGameResponse>* PrepareAsyncJoinGameRaw(::grpc::ClientContext* context, const ::heroes::JoinGameRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status ProcessClientCommand(::grpc::ClientContext* context, const ::heroes::ClientCommand& request, ::heroes::ClientCommandResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::heroes::ClientCommandResult>> AsyncProcessClientCommand(::grpc::ClientContext* context, const ::heroes::ClientCommand& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::heroes::ClientCommandResult>>(AsyncProcessClientCommandRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::heroes::ClientCommandResult>> PrepareAsyncProcessClientCommand(::grpc::ClientContext* context, const ::heroes::ClientCommand& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::heroes::ClientCommandResult>>(PrepareAsyncProcessClientCommandRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::heroes::ServerState>> UpdateState(::grpc::ClientContext* context, const ::heroes::UpdateStateRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::heroes::ServerState>>(UpdateStateRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::heroes::ServerState>> AsyncUpdateState(::grpc::ClientContext* context, const ::heroes::UpdateStateRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::heroes::ServerState>>(AsyncUpdateStateRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::heroes::ServerState>> PrepareAsyncUpdateState(::grpc::ClientContext* context, const ::heroes::UpdateStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::heroes::ServerState>>(PrepareAsyncUpdateStateRaw(context, request, cq));
    }
    ::grpc::Status CreateGame(::grpc::ClientContext* context, const ::heroes::CreateGameRequest& request, ::heroes::CreateGameResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::heroes::CreateGameResponse>> AsyncCreateGame(::grpc::ClientContext* context, const ::heroes::CreateGameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::heroes::CreateGameResponse>>(AsyncCreateGameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::heroes::CreateGameResponse>> PrepareAsyncCreateGame(::grpc::ClientContext* context, const ::heroes::CreateGameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::heroes::CreateGameResponse>>(PrepareAsyncCreateGameRaw(context, request, cq));
    }
    ::grpc::Status JoinGame(::grpc::ClientContext* context, const ::heroes::JoinGameRequest& request, ::heroes::JoinGameResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::heroes::JoinGameResponse>> AsyncJoinGame(::grpc::ClientContext* context, const ::heroes::JoinGameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::heroes::JoinGameResponse>>(AsyncJoinGameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::heroes::JoinGameResponse>> PrepareAsyncJoinGame(::grpc::ClientContext* context, const ::heroes::JoinGameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::heroes::JoinGameResponse>>(PrepareAsyncJoinGameRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void ProcessClientCommand(::grpc::ClientContext* context, const ::heroes::ClientCommand* request, ::heroes::ClientCommandResult* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ProcessClientCommand(::grpc::ClientContext* context, const ::heroes::ClientCommand* request, ::heroes::ClientCommandResult* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ProcessClientCommand(::grpc::ClientContext* context, const ::heroes::ClientCommand* request, ::heroes::ClientCommandResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdateState(::grpc::ClientContext* context, ::heroes::UpdateStateRequest* request, ::grpc::ClientReadReactor< ::heroes::ServerState>* reactor) override;
      #else
      void UpdateState(::grpc::ClientContext* context, ::heroes::UpdateStateRequest* request, ::grpc::experimental::ClientReadReactor< ::heroes::ServerState>* reactor) override;
      #endif
      void CreateGame(::grpc::ClientContext* context, const ::heroes::CreateGameRequest* request, ::heroes::CreateGameResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateGame(::grpc::ClientContext* context, const ::heroes::CreateGameRequest* request, ::heroes::CreateGameResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateGame(::grpc::ClientContext* context, const ::heroes::CreateGameRequest* request, ::heroes::CreateGameResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void JoinGame(::grpc::ClientContext* context, const ::heroes::JoinGameRequest* request, ::heroes::JoinGameResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void JoinGame(::grpc::ClientContext* context, const ::heroes::JoinGameRequest* request, ::heroes::JoinGameResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void JoinGame(::grpc::ClientContext* context, const ::heroes::JoinGameRequest* request, ::heroes::JoinGameResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::heroes::ClientCommandResult>* AsyncProcessClientCommandRaw(::grpc::ClientContext* context, const ::heroes::ClientCommand& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::heroes::ClientCommandResult>* PrepareAsyncProcessClientCommandRaw(::grpc::ClientContext* context, const ::heroes::ClientCommand& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::heroes::ServerState>* UpdateStateRaw(::grpc::ClientContext* context, const ::heroes::UpdateStateRequest& request) override;
    ::grpc::ClientAsyncReader< ::heroes::ServerState>* AsyncUpdateStateRaw(::grpc::ClientContext* context, const ::heroes::UpdateStateRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::heroes::ServerState>* PrepareAsyncUpdateStateRaw(::grpc::ClientContext* context, const ::heroes::UpdateStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::heroes::CreateGameResponse>* AsyncCreateGameRaw(::grpc::ClientContext* context, const ::heroes::CreateGameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::heroes::CreateGameResponse>* PrepareAsyncCreateGameRaw(::grpc::ClientContext* context, const ::heroes::CreateGameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::heroes::JoinGameResponse>* AsyncJoinGameRaw(::grpc::ClientContext* context, const ::heroes::JoinGameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::heroes::JoinGameResponse>* PrepareAsyncJoinGameRaw(::grpc::ClientContext* context, const ::heroes::JoinGameRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ProcessClientCommand_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateState_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateGame_;
    const ::grpc::internal::RpcMethod rpcmethod_JoinGame_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status ProcessClientCommand(::grpc::ServerContext* context, const ::heroes::ClientCommand* request, ::heroes::ClientCommandResult* response);
    virtual ::grpc::Status UpdateState(::grpc::ServerContext* context, const ::heroes::UpdateStateRequest* request, ::grpc::ServerWriter< ::heroes::ServerState>* writer);
    virtual ::grpc::Status CreateGame(::grpc::ServerContext* context, const ::heroes::CreateGameRequest* request, ::heroes::CreateGameResponse* response);
    virtual ::grpc::Status JoinGame(::grpc::ServerContext* context, const ::heroes::JoinGameRequest* request, ::heroes::JoinGameResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ProcessClientCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ProcessClientCommand() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ProcessClientCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProcessClientCommand(::grpc::ServerContext* /*context*/, const ::heroes::ClientCommand* /*request*/, ::heroes::ClientCommandResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestProcessClientCommand(::grpc::ServerContext* context, ::heroes::ClientCommand* request, ::grpc::ServerAsyncResponseWriter< ::heroes::ClientCommandResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateState() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_UpdateState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateState(::grpc::ServerContext* /*context*/, const ::heroes::UpdateStateRequest* /*request*/, ::grpc::ServerWriter< ::heroes::ServerState>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateState(::grpc::ServerContext* context, ::heroes::UpdateStateRequest* request, ::grpc::ServerAsyncWriter< ::heroes::ServerState>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateGame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateGame() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_CreateGame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateGame(::grpc::ServerContext* /*context*/, const ::heroes::CreateGameRequest* /*request*/, ::heroes::CreateGameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateGame(::grpc::ServerContext* context, ::heroes::CreateGameRequest* request, ::grpc::ServerAsyncResponseWriter< ::heroes::CreateGameResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_JoinGame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_JoinGame() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_JoinGame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status JoinGame(::grpc::ServerContext* /*context*/, const ::heroes::JoinGameRequest* /*request*/, ::heroes::JoinGameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestJoinGame(::grpc::ServerContext* context, ::heroes::JoinGameRequest* request, ::grpc::ServerAsyncResponseWriter< ::heroes::JoinGameResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ProcessClientCommand<WithAsyncMethod_UpdateState<WithAsyncMethod_CreateGame<WithAsyncMethod_JoinGame<Service > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ProcessClientCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ProcessClientCommand() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::heroes::ClientCommand, ::heroes::ClientCommandResult>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::heroes::ClientCommand* request, ::heroes::ClientCommandResult* response) { return this->ProcessClientCommand(context, request, response); }));}
    void SetMessageAllocatorFor_ProcessClientCommand(
        ::grpc::experimental::MessageAllocator< ::heroes::ClientCommand, ::heroes::ClientCommandResult>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::heroes::ClientCommand, ::heroes::ClientCommandResult>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ProcessClientCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProcessClientCommand(::grpc::ServerContext* /*context*/, const ::heroes::ClientCommand* /*request*/, ::heroes::ClientCommandResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ProcessClientCommand(
      ::grpc::CallbackServerContext* /*context*/, const ::heroes::ClientCommand* /*request*/, ::heroes::ClientCommandResult* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ProcessClientCommand(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::heroes::ClientCommand* /*request*/, ::heroes::ClientCommandResult* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UpdateState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_UpdateState() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::heroes::UpdateStateRequest, ::heroes::ServerState>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::heroes::UpdateStateRequest* request) { return this->UpdateState(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_UpdateState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateState(::grpc::ServerContext* /*context*/, const ::heroes::UpdateStateRequest* /*request*/, ::grpc::ServerWriter< ::heroes::ServerState>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::heroes::ServerState>* UpdateState(
      ::grpc::CallbackServerContext* /*context*/, const ::heroes::UpdateStateRequest* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::heroes::ServerState>* UpdateState(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::heroes::UpdateStateRequest* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateGame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CreateGame() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::heroes::CreateGameRequest, ::heroes::CreateGameResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::heroes::CreateGameRequest* request, ::heroes::CreateGameResponse* response) { return this->CreateGame(context, request, response); }));}
    void SetMessageAllocatorFor_CreateGame(
        ::grpc::experimental::MessageAllocator< ::heroes::CreateGameRequest, ::heroes::CreateGameResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::heroes::CreateGameRequest, ::heroes::CreateGameResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CreateGame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateGame(::grpc::ServerContext* /*context*/, const ::heroes::CreateGameRequest* /*request*/, ::heroes::CreateGameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateGame(
      ::grpc::CallbackServerContext* /*context*/, const ::heroes::CreateGameRequest* /*request*/, ::heroes::CreateGameResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateGame(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::heroes::CreateGameRequest* /*request*/, ::heroes::CreateGameResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_JoinGame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_JoinGame() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::heroes::JoinGameRequest, ::heroes::JoinGameResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::heroes::JoinGameRequest* request, ::heroes::JoinGameResponse* response) { return this->JoinGame(context, request, response); }));}
    void SetMessageAllocatorFor_JoinGame(
        ::grpc::experimental::MessageAllocator< ::heroes::JoinGameRequest, ::heroes::JoinGameResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::heroes::JoinGameRequest, ::heroes::JoinGameResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_JoinGame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status JoinGame(::grpc::ServerContext* /*context*/, const ::heroes::JoinGameRequest* /*request*/, ::heroes::JoinGameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* JoinGame(
      ::grpc::CallbackServerContext* /*context*/, const ::heroes::JoinGameRequest* /*request*/, ::heroes::JoinGameResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* JoinGame(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::heroes::JoinGameRequest* /*request*/, ::heroes::JoinGameResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_ProcessClientCommand<ExperimentalWithCallbackMethod_UpdateState<ExperimentalWithCallbackMethod_CreateGame<ExperimentalWithCallbackMethod_JoinGame<Service > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_ProcessClientCommand<ExperimentalWithCallbackMethod_UpdateState<ExperimentalWithCallbackMethod_CreateGame<ExperimentalWithCallbackMethod_JoinGame<Service > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ProcessClientCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ProcessClientCommand() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ProcessClientCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProcessClientCommand(::grpc::ServerContext* /*context*/, const ::heroes::ClientCommand* /*request*/, ::heroes::ClientCommandResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateState() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_UpdateState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateState(::grpc::ServerContext* /*context*/, const ::heroes::UpdateStateRequest* /*request*/, ::grpc::ServerWriter< ::heroes::ServerState>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateGame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateGame() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_CreateGame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateGame(::grpc::ServerContext* /*context*/, const ::heroes::CreateGameRequest* /*request*/, ::heroes::CreateGameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_JoinGame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_JoinGame() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_JoinGame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status JoinGame(::grpc::ServerContext* /*context*/, const ::heroes::JoinGameRequest* /*request*/, ::heroes::JoinGameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ProcessClientCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ProcessClientCommand() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ProcessClientCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProcessClientCommand(::grpc::ServerContext* /*context*/, const ::heroes::ClientCommand* /*request*/, ::heroes::ClientCommandResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestProcessClientCommand(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateState() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_UpdateState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateState(::grpc::ServerContext* /*context*/, const ::heroes::UpdateStateRequest* /*request*/, ::grpc::ServerWriter< ::heroes::ServerState>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateState(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateGame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateGame() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_CreateGame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateGame(::grpc::ServerContext* /*context*/, const ::heroes::CreateGameRequest* /*request*/, ::heroes::CreateGameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateGame(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_JoinGame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_JoinGame() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_JoinGame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status JoinGame(::grpc::ServerContext* /*context*/, const ::heroes::JoinGameRequest* /*request*/, ::heroes::JoinGameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestJoinGame(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ProcessClientCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ProcessClientCommand() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ProcessClientCommand(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ProcessClientCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProcessClientCommand(::grpc::ServerContext* /*context*/, const ::heroes::ClientCommand* /*request*/, ::heroes::ClientCommandResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ProcessClientCommand(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ProcessClientCommand(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UpdateState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_UpdateState() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->UpdateState(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_UpdateState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateState(::grpc::ServerContext* /*context*/, const ::heroes::UpdateStateRequest* /*request*/, ::grpc::ServerWriter< ::heroes::ServerState>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* UpdateState(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* UpdateState(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateGame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateGame() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateGame(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateGame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateGame(::grpc::ServerContext* /*context*/, const ::heroes::CreateGameRequest* /*request*/, ::heroes::CreateGameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateGame(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateGame(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_JoinGame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_JoinGame() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->JoinGame(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_JoinGame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status JoinGame(::grpc::ServerContext* /*context*/, const ::heroes::JoinGameRequest* /*request*/, ::heroes::JoinGameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* JoinGame(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* JoinGame(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ProcessClientCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ProcessClientCommand() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::heroes::ClientCommand, ::heroes::ClientCommandResult>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::heroes::ClientCommand, ::heroes::ClientCommandResult>* streamer) {
                       return this->StreamedProcessClientCommand(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ProcessClientCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ProcessClientCommand(::grpc::ServerContext* /*context*/, const ::heroes::ClientCommand* /*request*/, ::heroes::ClientCommandResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedProcessClientCommand(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::heroes::ClientCommand,::heroes::ClientCommandResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateGame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateGame() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::heroes::CreateGameRequest, ::heroes::CreateGameResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::heroes::CreateGameRequest, ::heroes::CreateGameResponse>* streamer) {
                       return this->StreamedCreateGame(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateGame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateGame(::grpc::ServerContext* /*context*/, const ::heroes::CreateGameRequest* /*request*/, ::heroes::CreateGameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateGame(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::heroes::CreateGameRequest,::heroes::CreateGameResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_JoinGame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_JoinGame() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::heroes::JoinGameRequest, ::heroes::JoinGameResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::heroes::JoinGameRequest, ::heroes::JoinGameResponse>* streamer) {
                       return this->StreamedJoinGame(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_JoinGame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status JoinGame(::grpc::ServerContext* /*context*/, const ::heroes::JoinGameRequest* /*request*/, ::heroes::JoinGameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedJoinGame(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::heroes::JoinGameRequest,::heroes::JoinGameResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ProcessClientCommand<WithStreamedUnaryMethod_CreateGame<WithStreamedUnaryMethod_JoinGame<Service > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_UpdateState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_UpdateState() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::heroes::UpdateStateRequest, ::heroes::ServerState>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::heroes::UpdateStateRequest, ::heroes::ServerState>* streamer) {
                       return this->StreamedUpdateState(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_UpdateState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateState(::grpc::ServerContext* /*context*/, const ::heroes::UpdateStateRequest* /*request*/, ::grpc::ServerWriter< ::heroes::ServerState>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedUpdateState(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::heroes::UpdateStateRequest,::heroes::ServerState>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_UpdateState<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_ProcessClientCommand<WithSplitStreamingMethod_UpdateState<WithStreamedUnaryMethod_CreateGame<WithStreamedUnaryMethod_JoinGame<Service > > > > StreamedService;
};

}  // namespace heroes


#endif  // GRPC_entity_2eproto__INCLUDED
